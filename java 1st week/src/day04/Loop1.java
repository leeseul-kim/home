package day04;

public class Loop1 {
	/*
	 	반복문
	 		: 특정 명령을 반복하도록 하는 명령
	 		
	 		종류]
	 			1. for 명령문
	 				: 명령문 형식 자체에 카운터변수(반복할 횟수를 지정하는 변수)가 만들어진다.
	 				
	 			2. while 명령문
	 				: 형식에 카운터변수를 정의하는 부분이 없다.
	 				따라서, 반복문이 실행되기 전에 카운터변수가 만들어져야한다.
	 				또는 반복실행을 종료할 조건을 반드시 추가해주어야한다.
	 				
	 		
	 		1. for 명령문
	 			형식]
	 				for-(1)(카운터변수 선언과 초기화-(2); 조건식-(3); 증감식-(4)) {
	 					실행문-(5)
	 				}
	 				-(6)
	 				
		 			실행순서 : (1) -> (2) -> (3) -> (5) -> (4) -> (3) -> (5) -> (4) -> (3) -> ...
		 						... -> 조건식이 거짓이 될 때까지 -> (6)
	 						
	 				
	 			참고]
	 				(2)번은 처음 딱 한번만 실행된다.
	 				(2)번은 주로 카운터변수를 선언하고 초기화하는 목적으로 사용된다. 필요없으면 생략가능하나,
	 				그럴시에는 세미콜론은 반드시 해주어야한다.
	 				(2)번에서 만들어진 카운터변수는 for명령문 내에서만 사용하는 지역변수이다.
	 					//지역변수란? 블럭{}을 빠져나가면 사라지는 변수로, 블럭 이후에서는 사용할 수 없는 변수
	 				
	 				(4)번은 반복문의 실행문이 끝나면 읽는 부분이다.
	 				 	//반복횟수만큼 반복한다.
	 				 	주로 카운터를 증가시키는 목적으로 사용한다.
	 				 	
	 			참고]
	 				for 명령문은 선조건 후처리 명령이다.
	 				따라서, 조건이 맞지 않는다면 한번도 실행하지 않을 수 있다.
	 			
	 			참고]
	 				for 명령문의 ( ; ;) 안의 내용은 필요에 따라서 생략이 가능하다.
	 					//조건이 항상 true로 간주됨을 뜻한다.
	 				이런 경우, 이 반복문은 무한반복을 하는 무한루프로 처리가 된다.
	 				
	 			**********
	 			참고]
	 				중첩 for 명령문(이중 for문)
	 					: 조건문과 마찬가지로 반복문도 중첩하여 사용이 가능하다.
	 					
	 					**
	 					안쪽 for 명령문은 바깥 for 명령문이 다음회차로 반복하면 처음부터 다시 시작한다.
	 					for(int i = 0; i < 10; i++) {
	 					
	 						for(int j = 0; i < 5; j++) {
	 							i = 0일때, j는 0~4까지 반복후, outer for문의 증감식으로 이동한다.
	 							i = 1일때, j는 0~4까지 반복후, outer for문의 증감식으로 이동한다.
	 							....
	 							i = 9일때, j는 0~4까지 반복후, outer for문의 증감식으로 이동하고,
	 							i = 10이 되면 조건식에 맞지 않으므로 outer for문 자체를 빠져나간다.
	 						}//inner
	 						
	 					}//outer
	 */
	public static void main(String[] args) {
		
		//예제] 1 ~100 까지의 합을 구하시오.
		int sum = 0;
		for(int i = 1; i <= 100; i++) {
			sum += i;
		}
		
		System.out.printf("1부터 100까지의 합은 %d 입니다.", sum);
	}//main
}
 