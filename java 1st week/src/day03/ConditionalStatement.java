package day03;

import java.util.Scanner;

public class ConditionalStatement {
	
	/*
	 	제어명령
	 		: 컴퓨터는 원칙적으로 코드를 실행할 떄, 순서대로 실행함을 원칙으로 한다.
	 		이는 순서가 위 -> 아래, 왼쪽 -> 오른쪽으로 읽어서 실행한다는 뜻이다.
	 		
	 		그런데 프로그램을 제작하다보면, 이 순서가 바뀌거나 건너 뛰어야하는 경우가 발생을 한다.
	 		
	 		이 경우에 사용하는 명령이 제어명령이다.
	 		
	 		종류]
	 			1. 조건제어명령
	 				: 특정 조건에 따라서 실행순서를 변경하는 명령
	 				
	 				형식1] 조건식이 참일때만 처리하는 조건명령, 거짓일 경우의 처리내용은 없기때문에 그냥 건너뛴다.
	 				
	 					if-(1)(조건식-(2)) {
	 						조건식이 참일 때 실행되는 영역; -(3)
	 					}
	 					-(4)
	 					
	 					*조건식이 참일 경우의 순서		: (1) -> (2) -> (3) -> (4)
	 					*조건식이 거짓일 경우의 순서	: (1) -> (2) -> (4)
	 					
	 				형식2] 조건식이 참일 경우, 거짓일 경우 모두 처리내용을 기술해놓은 조건문.
	 				
	 					if-(1)(조건식-(2)) {
	 						조건식이 참일 때 실행되는 영역;-(3)
	 					} else {
	 						조건식이 거짓일 때 실행되는 영역;-(4)
	 					}
	 					-(5)
	 					
	 					*조건식이 참일 경우의 순서		: (1) -> (2) -> (3) -> (5)
	 					*조건식이 거짓일 경우의 순서	: (1) -> (2) -> (4) -> (5)
	 					
	 				형식3] 두 가지 이상의 조건식에서 각 조건이 참인 경우 처리내용을 정의해놓은 조건문.
	 				
	 					if-(1)(조건식1-(2)) {
	 						조건식1이 참일 때 실행되는 영역;-(3)
	 					} else if(조건식2-(4)) {
	 						조건식2가 참일 때 실행되는 영역;-(5)
	 					} else if(조건식3-(6) {
	 						조건식3이 참일 때 실행되는 영역;-(7)
	 					}
	 						....
	 					} else if(조건식n-(n)) {
	 						조건식n이 참일 때 실행되는 영역;-(n+1)
	 					} else {
	 						아무조건에도 맞지 않을 때 실행되는 영역;-(n+2)
	 					}
	 					-(n+3)
	 					
	 					*조건식1이 참일 경우의 순서			: (1) -> (2) -> (3) -> (n+3)
	 					*조건식2가 참일 경우의 순서			: (1) -> (2) -> (4) -> (5) -> (n+3)
	 					*조건식n이 참일 경우의 순서			: (1) -> (2) -> (4) -> (6) -> ....
	 															-> (n) -> (n+1) -> (n+3)
	 					*아무 조건에 맞지 않는 경우의 순서	: (1) -> (2) -> (4) -> (6) -> .... 
	 					*										-> (n+1) -> (n+3)
	 					*
	 					
 					참고]
 						제어명령은 중첩하여 사용이 가능하다.
 						
 						예]
 							if(조건식1) {
 								if(조건식2) {
 								
 								} else {
 								
 								}
 							} else {
 								if(조건식3) {
 								
 								} else if(조건식4) {
 								
 								} else {
 								
 								}
 							}
	 							
	 				형식4]
	 					switch - case
	 						: 다중 조건식이라고도 하며, 여러개의 질문을 차례 처리할 수 있는 명령이다.
	 						
	 						******
	 						주의]
	 							switch - case 문에서는
	 							조건에 맞는 case문 맨 아래쪽에는 반드시 break;를 기술해야한다.
	 							
	 						형식]
	 							switch-(1)(비교내용-(2)) {
	 							case 데이터1;-(3)
	 								실행문1;-(4)
	 								break;-(5)
	 							case 데이터2;-(6)
	 								실행문2;-(7)
	 								break;-(8)
	 							...
	 							default
	 								실행문n-(9)
	 							}
	 							-(10)
	 							
	 					순서]
	 						비교내용과 데이터1이 같은 경우	: (1) -> (2) -> (3) -> (4) -> (5) -> (10)
	 						비교내용과 데이터2가 같은 경우	: (1) -> (2) -> (3) -> (6) -> (7) -> (8) -> (10)
	 						비교내용과 일치하지 않는 경우	: (1) -> (2) -> (3) -> (6) -> ... -> (9) -> (10)
	 					
	 */

	//예제] 숫자 두개를 입력받아서 큰 수에서 작은 수의 차를 출력하세요.
	public ConditionalStatement() {
		
	}//constructor
	
	public void solv() {
		//입력받을 준비
		Scanner sc = new Scanner(System.in);
		
		//메세지출력 * 2
		System.out.print("첫번째 숫자 : ");
		int num1 = sc.nextInt();
		System.out.print("두번째 숫자 : ");
		int num2 = sc.nextInt();
		
//		//두 값을 뺀 값을 담을 변수
//		int rst = num1 - num2;
		
//		//크기비교
//			//블럭안에서 만들어진 변수(지역변수)는 블럭 밖으로 빠져나오면 사라지므로,
//			//값의 차를 저장할 변수는 조건문밖에서 만들어주는 것이 좋다.
//		if(num1 >= num2) {
//			rst = num1 - num2;
//		}else {
//			rst = num2 - num1;
//		}
		
		//치환정렬 이용
		if(num1 < num2) {
			//num1 - num2를 해줄 것인데, 만일 num1의 값이 num2보다 작다면 둘을 바꿔주면 됨,
			//값을 서로 바꿔주기 위한 임시변수선언
			int tmp = num1;
			num1 = num2;
		}//if
		
		int rst = num1 - num2;
		
		System.out.printf("입력한 두 수의 차\n%d - %d = %d", num1, num2, rst);
	}
}
