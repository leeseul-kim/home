Reviews]
	배열을 관리하는 클래스		-	Arrays
	객체를 관리하는 클래스		-	Objects
	...
	
	
#Collections 클래스

	: 이것은 이름은 컬렉션이지만, 컬렉션은 아니고
	컬렉션을 이용할 때 필요한 부가적인 기능을 제공하는 
	utility 적인 클래스이다.
	
	
	주의]
		컬렉션을 사용할 때
		List를 달라고 하면(매개변수에 List 타입으로 정의가 되어있으면)
		List 계열을 입력하면 된다.
		Set을 달라고 하면 Set 계열을 입력하면 된다.
		Collection을 달라고 하는 경우는 List 또는 Set 계열 중 하나를 입력하면 된다.
		Map을 달라고 하면 Map 계열을 주면 된다.
			//Map은 다형성처리가 되지 않는다.
			
			
	참고]
		일반적인 정렬은 오름차순으로 정렬하게 된다.
		만약 정렬 방식을 변경하고자 한다면,
		sort(List list, Comparator c) 함수를 사용해야한다.
		
			정렬을 해주는 인터페이스를 2가지가 있는데, 이 두가지를 어떻게 써야하는지 의문이 생긴다.
				Comparable / Comparator
			보통 정렬에서는 기준을 어떤 것으로 해야하는지에 따라 다르다.
			
=====================================================================================================

#Set 계열

	특징]
	
		1. 입력한 순서대로 보관하고 있을 보장이 없다. 즉, 입력순서를 보장하지 못한다.
		(나름의 규칙에 따라서 내부적으로 정렬을 하여 보관하기 때문이다.)
		
		2. 중복된 데이터는 한번만 저장한다.
		(중복된 데이터가 입력될 경우에는 먼저 저장된 데이터를 지우고, 새로운 데이터를 입력한다.)
		즉, 교체한다는 이야기다.
		
		
	종류]
		
		1. HashSet
			: HashCode를 이용해서 정렬하여 보관하는 방식의 컬렉션이다.
			따라서, 우리가 상상하는 정렬은 이루어지지않는다.
			
				-몰라도되는 내용-
				Hash(int initialCapacity, float loadFactor)
					: loadFactor 는 HashCode 값을 만드는 규칙에 사용할 상수값
					사용자가 지정하면서 해쉬테이블을 만들어 사용한다.
					
		*****
		참고]
		
			Set 계열은 데이터를 꺼내는 함수는 존재하지 않는다.
				: 왜냐하면, 개발자는 데이터가 저장된 장소를 모르기 때문이다.
				따라서 특정 위치를 지정하면서 데이터를 꺼낼 수 없다.
				그렇기 때문에 Iterator로 변환하여 순서대로 꺼내요 사용하도록 한다.
	
		2. TreeSet
			: 내부적으로 TreeSort라는 알고리즘을 이용하여 데이터를 보관하는 기능을 가진 컬렉션이다.
			
			
			특징]
			
				우리가 상상하는 정렬방식에 이용한다.				
				ex. 오름차순, 내림차순, etc.
			
			
			생성방법]
				
				TreeSet(Comparator comparator)
					: 정렬 방식을 변경하여 TreeSet을 만든다.
				
				TreeSet(SortedSet<E> s)
					: TreeSet을 이용하여 다시 TreeSet을 만든다.
			
			
			참고함수]
				
				subSet()
					: 하나의 Set에 담긴 내용 중에서 특정부분만 골라서 새로운 Set을 만드는 함수
					그러므로, 반환값은 Set이다.
				
				headSet(E toElement)
					: 처음부터 지정한 부분까지 골라서 새로운 Set을 만든다.
					
				tailSet(E fromElement)
					: 지정한 부분부터 마지막까지 골라서 새로운 Set을 만든다.

=====================================================================================================

#Map 계열
	: 하나의 데이터를 그 데이터를 구분할 수 있는 키 값과 한쌍으로 만들어서
	데이터를 기억하는 컬렉션의 일종.
	그리고 사용할 경우에는 키 값을 이용해서 데이터를 꺼낼 수 있도록 해 놓았다.
	
	Map 계열은 많은 양의 데이터를 보관하는 용도보다는
	데이터를 쉽게 구분하여 사용할 목적으로 사용된다.
	
	
	Hashtable / HashMap
		: Hashtable이 이전 버전에서 나온 클래스이고,
		HashMap이 다음 버전에서 나온 클래스이므로,
		HashMap을 사용하도록 권장하고 있다.
		
		내부적으로 키 값을 해쉬테이블을 이용하여 정렬해서 보관한다.
		
		
		주요함수]
		
			put(Object key, Object value)
				: 데이터를 입력하는 함수
				//List, Set의 경우 데이터를 입력할 때 쓰는 함수는 add이다.
				
			get(Object key)
				: 필요한 데이터를 꺼내오는 함수
				
		
		참고함수]
		
			values()
				: 데이터만 꺼내서 사용할 수 있다.
				
			keys()
				: 키 값만 꺼내서 사용할 수 있다.
				
		
			참고]
				
				keys()로 꺼낸 데이터는 Enumeration으로 변환한다.
				
				Enumeration(열거) 클래스	
				//이 클래스는 Iterator의 구버전이다.
				즉, 데이터를 순차적으로 꺼낼 수 있는 것이다.
				
				
			참고]
			
				HashMap에서는 키 값만 꺼내는 함수가 keySet()으로 변경되었다.
				이때, 반환값으로는 Set<> 이 있는데 Set을 사용하는 이유는
				키 값이 중복이 되면 안되기 때문이다. (Set 역시 중복데이터는 취급하지않는다.)
				이후, 키 값을 꺼내려고 한다면, Set에서 Iterator 를 사용하거나,
				ArrayList(Collection c)	 생성자함수를 사용하면 된다.
				
			
			참고]
			
				entrySet()
					: Map은 반드시 키값을 알아야 데이터를 꺼낼 수 있다.
					(물론 다른 방식으로 꺼낼 수 있기도 한다.)
					//그래서 키 값과 데이터를 Set으로 묶어주는 것이다. 
					
				문제]
					Map은 항상 두개가 있어야 저장이 된다.
					Set은 항상 한개만 저장이 된다.
					따라서, 어떻게 해서든지 key, value 를 하나로 묶어야만 Set에
					한 세트로 저장이 가능하다.
					
					이것을 해결하기 위해서 클래스(예로, VO 클래스// 보통 한 쌍(row)를 위한 것)가 존재한다.
					그 클래스가 바로
								Map.Entry
					라는 클래스이다.
					이 클래스 안에는 key와 value 변수를 은닉화(접근지정자를 private으로 하는 것) 시켜놓고,
					이 변수를 사용할 수 있는 함수(Setter, Getter)를 제공하고 있다.
					이러한 변수들과 이러한 함수들을 캡슐화 해 놓은 클래스이다.
	
	TreeMap
		: TreeSet과 마찬가지로 내부에서 정렬하면서 데이터를 기억하는 Map.
		이때, 정렬기준은 키 값을 이용하여 정렬하게 된다.
		따라서 키 값이 정렬이 되지 않는 클래스를 사용할 수 없고,
		필요하다면 정렬방식을 정해서 사용해야한다.
		
		Temp abc(){
			....
			int a = 10;
			String b = "우현우";
			Temp t = new Temp();
			t.a = a;
			t.b = b;
			return t;
		}
		//이처럼 클래스를 보면 가끔 무슨 기능을 필요로 해서 만들어지는 것이 아니라,
		다만, 여러개의 데이터를 하나로 묶기 위한 목적으로 만들어 놓은 클래스가 있다.
		
		class Temp{
			int a;
			String b;
		}
		//이런 클래스를 우리는 데이터 빈 클래스라고 하고,
		Value Object(VO) 또는 Data Transfer Object(DTO) 클래스라고 한다.
		
		
	참고]
		컬렉션 안에는 다시 컬렉션을 입력할 수 있다.
		왜냐하면, 컬렉션 안에는 모든 클래스를 입력할 수 있으므로
		컬렉션 클래스까지 저장이 가능하다.

=====================================================================================================

#Properties 클래스
	
	: Map의 역할을 하는 클래스
	
	일반 Map과의 차이점은
		파일(외부장치)을 이용해서 직접 데이터를 읽어서 Map처럼 저장할 수 있고,
		Map의 저장된 데이터를 직접 파일(외부장치)로 출력해서 저장할 수 있다.
		
	
	문제]
		파일의 내용을 읽을 때 Encoding이 되지 않는다.
			: 한글 파일의 경우 파일 자체에서 인코딩을 하지 않으면
			내용이 한글인 경우 한글이 깨져서 들어온다.
			
		모든 내용이 문자열로 처리가 된다.
		만약 공백이 입력되면 공백도 문자열의 구성으로 간주되어 같이 처리한다.
		(properties 클래스에서는 공백이 있는지 없는지가 중요하다.)
		그렇기 때문에 주의를 기울어야한다.
		
		"abc" 와 "abc "는 전혀 다른 데이터값이다.
		
		어떤때에 Properties를 자주 쓰는지?
			Properties 파일에 요청내용, 해당 요청이 왔을 때 실행 된 클래스
			실행해줘야하는지 알 수 있을 것이다.
			
	
	참고]
		한글이 포함된 파일을 Properties에서 사용하기 위해서 인코딩 시키는 방법
			
			1. cmd 창을 연다.
			
			2. path를 JAVA_HOME으로 잡아준다.
			
			3. native2ascii.exe 기능을 이용해서 인코딩해준다.
			
				형식]
					C:\Program Files\Java\jdk1.8.0_241\bin>native2ascii 현재파일 새로운파일
						//인코딩된 새로운 파일을 만들어준다.
						
			
					예]
						>native2ascii d:\sample.txt d:\sample_ko.txt
						
	참고]
		Properties 클래스는 오직 String으로만 키 값과 데이터를 처리해야한다.
		

	참고]
		Properties는 이외에도 또 하나의 특징을 가지고 있는데,
		현재 프로그램의 정보를 Map으로 자동처리하는 기능이 그것이다. 
			
=====================================================================================================

#Generic(제너릭스)
	: 컬렉션에 데이터를 입력하면 입력하는 데이터의 타입을 미리 알려줌으로써
	꺼내올 때 좀 더 편하게(형변환없이) 꺼낼 수 있도록 해주는 것.
	
	
		//컬렉션에는 모든 데이터가 입력되는 동시에 Object 타입으로 자동형변환이 되어서
		저장이 되기 때문이다.
		

	형식]
		ArrayList<String> list = new ArrayList<String>();
		//list에는 반드시 문자열 데이터만 입력해야한다. 라는 선언이다.
		
	
	참고]
		제너릭스는 전파되지 않는다.
		하나의 컬렉션이 제너릭스 선언이 되더라도
		그 컬렉션을 이용하는 다른 컬렉션에서도 제너릭스가 전파되지 않는다.
		그러므로 다시 선언해줘야한다.
		
	
	참고]
		특수한 제너릭스
			
			원래 제너릭스는 특정 클래스만 입력받을 목적으로 사용된다.
			
		
		형식]
			
			<? super 클래스이름>
				: 지정한 클래스를 포함해서 상위클래스를 모두 허락한다.
				<클래스이름> 의 형식과 같은 개념이다.
				
	
	이 방법은 제너릭스 선언을 하지 않은 것과 동일한 효과이다.
	 
=====================================================================================================

#Annotation(어노테이션)
	: 내부적으로 약속된 실행을 자동으로 처리하도록 하는 명령의 일종
	
	주로
		화면에 실제 보이는 실행이 아니고
		점검을 한다던지,
		선언적인 실행(이 클래스는 ~~~ 로 작성하세요...)
		의 의미를 가진 명령을 말한다.
	
	
	형식]
		@명령