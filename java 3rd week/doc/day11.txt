#생성자함수(Constructor)
	: 클래스를 사용하기 위해서 new 시키는 순간 자동실행되는 함수 
	
	즉, 클래스를 new 한다는 개념은 
	Object(객체)로 만들어서 실행을 한다는 것이다.
	이때, 실행된다는 것은
	결국 Object를 만드는 순간에 무언가를 실행한다는 개념이다.
	이것은 물건을 만들 때 필요한 어떤 것을 조치 해야한다는 뜻이다.
	
	결론]
		객체를 실제로 만들기 위한 함수를 생성자함수라고 한다.
		
		클래스는 한가지 목적을 달성하기 위해서 만들어지는 프로그램의 단위이다.
		이 안에는 그 목적을 달성하기 위한 변수와 함수로 구성이 되어있다.
		
		하지만, 그 목적을 달성하기 위해서 가장 기본적으로 해주어야할 조치가 필요한 경우가 있다.
		
		예]
			String
				: 문자열을 관리하기 위한 목적으로 만들어진 클래스
				//기본적으로 문자열을 기억하고 있어야한다.
					//String();			>> 기본생성자함수(Default Constructor)
					//String(문자열);	>> 문자열을 넣어서 기억시켜주는 생성자함수
			
			FileOutputStream
				: 파일에 내용을 기록하기 위한 목적으로 만들어진 클래스
				//파일을 사용할 수 있도록 열어두어야한다.
			
			Socket
				: 네트워크(통신)를 구성하기 위한 목적으로 만들어진 클래스
				//상대방과 접속이 이루어져야한다.
				
				
		프로그램은 프로그램답게 뭔가를 처리하기 위해서는 기능(함수)이 필요하고,
		위의 경우를 비춰보면, 각각의 클래스는 객체가 되는 순간
		그 클래스의 최소한의 일을 할 필요가 있겠다.
		
		바로 이런 일을 하기 위해 만들어놓은 함수를	
												"생성자함수(Constructor)" 라고 한다.
												
		즉, 우리가 생성자함수를 만드는 이유는 만들고자하는 클래스의 목적에 따라서
		그 클래스가 해야할 가장 기본적인 일을 처리하기 위해서이다.
		ex.변수초기화, 함수 호출 etc.
		
	
	생성자함수 만드는 방법]
		
		규칙]
			1. 함수의 이름은 반드시 클래스의 이름과 대소문자까지 동일해야한다.
			2. 반환값은 절대로 가지면 안되고 void 역시 안된다.
			3. 매개변수는 가질 수 있다.
		
		예]
			class Test {
				Test() {
					//생성자함수
					이곳에 이 클래스가 해야할 가장 기본적인 내용을 코딩하면 된다.
				}//default constructor
				
				Test(int a) {
					//매개변수가 있는 생성자함수
				}//constructor
				
				void Test() {}	//반환값 타입이 붙는 순간 일반함수가 된다.
			
			}//class
			
		참고]
			생성자함수는 오버로딩이 가능하다.
			왜? 필요하면 그 클래스가 기본적으로 해야할 일이 조금씩 달라질 수 있기 때문이다.
			
			방법]
				매개변수의 갯수, 순서, 형태 중 하나 이상을 달리함으로써,
				생성자함수를 여러개 만들어 놓을 수 있다.
				
			문제]
				여러개의 생성자함수가 있다는 사실은
				new 시킬 때 호출하는 생성자함수를 선택할 수 있어야한다는 것이다.
					//new 시키는 문법을 살펴보면 해답을 찾을 수 있다.
					new 시키는 문법은 생성자함수를 호출하는 문법이라고 할 수 있다.
				
				예]
					class Test {
						Test() {}
						Test(int a) {}
					}
					
					//객체를 만들어보자
					new Test();
					new Test(10);
					//두가지 모두 Test클래스에서 정의해 놓은 생성자함수이므로,
					모두 객체를 만들 수 있다.
					
			결론]
				매개변수가 있는 생성자함수를 호출하기 위해서는
				new 시킬 때 매개변수에 필요한 데이터를 입력하면서 new 시키면 된다.
				
		참고]
			기본 생성자함수(Default Constructor)
				: 매개변수가 하나도 없는 생성자함수를 부르는 용어
			
			*****
			자바는 생성자함수가 없어도 new 명령으로 객체를 만들 수 있다.
			하지만, 이것은 생성자함수를 이용하지않는 것이 아니라
			JVM이 기본 생성자함수를 내부적으로 만들어준 후, 이 생성자함수를 호출하는 것이다.
			
			결국, 자바는 new 시킬때마다 반드시 생성자함수를 이용하게 된다.
			
			*****
			만약, 개발자가 생성자함수를 단 한개라도 정의를 한다면(만들면)
			JVM은 기본 생성자함수를 만들어주지않는다.
			즉, 내부적으로 기본 생성자함수를 만드는 경우는
			오직 개발자가 생성자함수를 한개라도 정의하지(만들지) 않을 때이다.
			
	생성자함수 이용방법]
	
		결론]
			생성자함수는 그 클래스를 어떻게 new 시킬 지 알려주는 함수이다.
			다시말하자면, 어떻게 객체를 만들지 알려주는 함수라는 뜻이다.
			
			따라서, 생성자함수가 요구하는 매개변수가 무엇인지를 보면
			그 클래스를 생성할 수 있는 방법이 도출된다.
			
		참고]
			여분의 클래스를 만들 때, 그 클래스를 객체로 만들 수 있는 다양한 방식을
			생성자함수를 이용하여 만들어주는 것이 좋다.
			
		**********
		참고]
			생성자함수는 꼭 new 명령과 함께 실행되어야한다.
			따로 생성자함수만 독립적으로 실행될 수 없다.
			
			this()
				: 생성자함수는 원칙적으로 개발자가 직접 호출할 수 없다.
				
				현재 생성자함수를 실행하는 도중에
				다른 생성자함수를 강제로 호출하는 유일한 방법이 this()함수이다.
				
			***
			규칙]
				1. 반드시 생성자함수 안에서만 사용해야한다.
					일반함수 안에서는 사용할 수 없다.
					
				2. 반드시 생성자함수의 첫줄, 첫문장으로 사용해야한다.
					이전에 다른 문장이 존재하면 에러가 발생한다.
				
				왜 사용해야하는가?
					: 클래스는 한가지 목적을 가진 프로그램의 집합이다.
					물론 기본적인 작업이 조금은 달라질 수 있지만,
					그 틀 자체는 변하지 않을 것이다.
					
					예]
						Socket은 접속할 대상의 주소와 포트번호는 바뀌겠지만,
						결론은 접속을 시도해야할 것이다.
						
						String은 데이터의 형태가 달라지겠지만
						결론은 문자열을 만들어야할 것이다.
						
					따라서, 생성자함수가 하는 기능은 거의 비슷할 것이다.
					기능이 비슷하다는 의미는 코딩 내용도 거의 동일하다는 뜻이다.
					그런데 생성자함수가 여러개이면,
					같은 코드의 내용이 중복되어 들어갈 것이다.
					이 작업을 조금이라도 단순화 시켜주기 위해서, 생성자끼리는 서로 필요하면
					상대방을 이용할 수 있게 만들어져있는데, 이 기법이 this()함수이다.

================================================================================================

#this
	: 교과서적인 의미로, 현재 실행중인 Object의 주소를 기억하는 약속된 변수이다.
	
	이것은 JVM이 클래스를 처리하기 위해서 JVM이 사용하는 변수이다.
	즉, 개발자는 거의 사용하지 않는다.
	
	규칙]
		1. 모든멤버는 사용할 때 반드시 앞에 주소가 있어야한다.
			멤버는 클래스 내의 함수나 변수를 부르는 단어이다.
			
			그래서 new 시킨 후, 그 주소를 기억해놓았다가
			그 주소를 이용하여 사용하는 것이다.
			
		2. 만약 주소가 없다면 JVM이 자동적으로 this를 붙여준다.
		
		3. 멤버함수를 호출할때는 무조건 주소값을 함수한테 알려주도록 약속이 되어있고,
		함수는 this 변수를 준비한 후, 함수를 호출할 때 알려준 주소를 기억하게 된다.
		
		
		참고]
			딱 한번 this를 개발자가 사용해야하는 경우가 있다.
			
			가끔은 지역변수와 멤버변수가 이름이 동일하게 만들어진 경우가 발생한다.
			이러면 그 함수는 지역변수를 우선 사용하게 된다.
			따라서 멤버변수는 데어터가 기억되지 않을 수 있다.
			
			***
			이때, 굳이 이 변수가 멤버변수임을 명확하게 밝히고 싶은 경우가 있다면,
			강제로 this를 사용하면 된다.	
				
================================================================================================

#static 속성
	: static 영역에 생기는 함수나 변수에 붙여주는 속성
	
	참고]
		클래스, 함수, 변수를 만들 때 속성을 지정할 수 있다.
		
		예]
			1. 클래스
				[접근지정자] [속성] class 클래스이름 {}
				
			2. 함수
				[접근지정자] [속성] 반환값타입 함수이름(매개변수리스트) {}
				
			3. 변수
				[접근지정자] [속성] 데이터타입 변수이름;
		
	static 영역의 특징]
		1. 프로그램이 실행되기 위해서 JVM이 로딩하는 순간 저절로 생기는 영역
		즉, 사용자가 특별히 만들어 달라고 요구하지않아도 자동적으로 생긴다.
		
		***
		2. 한번 생긴 변수나 함수는 두번 다시 생기지않는다.
		
#static 변수
	: static 영역에 만들어지는 변수
	
	형식]
		[접근지정자] static 데이터타입 변수이름;
		
	특징]
		1. 여러 Object가 공동으로 사용하는 변수가 된다.
		왜냐하면, Object 100개를 만들어도 static 변수는 오직 1개이기 때문이다.
		즉, 한 개체가 데이터를 바꾸면 다른 객체도 바뀐 데이터를 사용해야한다.
		
		따라서, static 변수는 객체의 멤버로서의 의미가 없다.
		더군다나 객체가 없어도 사용할 수 있다.
		
		2. new 시키지않아도 사용할 수 있는 변수이다.
		왜냐하면, 이미 메모리에 올려져있기 때문이다.
		
	결론]
	
		사용방법]
			클래스이름.변수이름;
								으로 사용하면 된다.
								
#static 함수
	: 변수와 마찬가지로 static 영역에 생기는 함수를 지칭한다.
	따라서, 객체가 없어도 사용할 수 있다.
	
	사용법]
		클래스이름.함수이름();
							으로 사용하면 된다.
	
	***
	특징]
		this를 사용할 수 없는 함수이다.
		
	***
	결론]
		static 함수 안에서는 static 멤버만 사용할 수 있다.
		메모리에 올려진 멤버는 모두 사용할 수 있다.
		
		일반함수 안에서는 일반멤버와 static 멤버 모두 사용가능하다.

================================================================================================

#멤버변수의 초기화
	: 멤버변수는 heap 영역에 생기므로, 자동초기화가 이루어진다.
	하지만, 가끔은 변수에 기본적인 값을 지정할 필요가 있다.
	
	1. 명시적 초기화
		: 변수를 선언하면서 값을 입력하는 방법이다.
		가장 먼저 실행되는 방법임.
		
		예]
			class Test {
				int no = 10; //명시적 초기화
			}
			
	2. 초기화 블럭을 이용한 초기화
		: 이것은 instance 변수(멤버변수)에 대해서만 가능한 방법이다.
		두번째로 실행되는 방법임.
		
		형식]
			{
				이 안에서 데이터를 변수에 입력
			}	
		
		예]
			class Test {
				int no;
				
				{
					no = 10;
				}
			}
			
	3. static 블럭을 이용한 초기화
		: 2번과는 반대로, static 변수에 한해서만 가능한 방법이다.
		두번째로 실행되는 방법
		
		형식]
			static {
				데이터 입력
			}
			
		예]
			class Test {
				static int no;
				
				static {
					no = 10;
				}
			}
			
	4. 생성자함수를 이용한 초기화
		: 가장 마지막에 실행되는 방법이다.
		
		예]
			class Test {
				int no;
				
				public Test() {
					this.no = 10;
				}
			}
			
================================================================================================

###상	속###
	: 객체지향언어의 핵심
	이미 만들어진 클래스의 기능을 그대로 부여받아서 (함수, 변수를 그대로 복사받아서)
	새로운 클래스를 만드는 방법이다.
	
	이 개념이 나타나게 된 이유는 소프트웨어의 개발속도를 빠르게 하기 위해서이다.
	
	즉, 상속은 객체지향에서 매우 중요한 역할을 한다.
	
	객체지향언어는 부품단위(클래스)로 프로그램을 만든 후,
	그 부품을 조립하여 원하는 결과를 얻어내는 언어이다.
	
	//어디서 부품을 구했는데, 그 기능이 사용자 마음에 들지 않을 수 있다.
	그러면 처음부터 다시 만들어야하는가에 대한 문제에 도달하게 된다.
	이 문제를 해결하기 위해서 만든 방법이 상속이다.
	
	상속은 자신이 만들고자 하는 부품과 가장 유사한 부품을 가지고 와서,
	일단 그 기능을 복사한 후
							1. 없는 기능은 더 붙이고,
							2. 있는 기능에서 바꿀 내용만 바꾼다.
							
	*
	형식]
		[접근지정자] [속성] class 클래스이름 extends 상속받을 클래스이름 {}
		
	***
	참고]
		자바에서는 상속은 오직 단일상속만 가능하다.
		
		예]
			class Test {}
			class Test1 {}
			clastt Exec extends Test, Test1 {}		//에러! 단일상속만 가능하기 때문에.
			
	용어정리]
		상속을 해준 클래스	- super Class, 상위클래스, 부모클래스
		
		상속을 받은 클래스	- sub Class, 하위클래스, 자식클래스
		
		is a 				- 상속관계에 있는 클래스를 부르는 용어.
								(상속관계에 있다 라는 표현임.)
								
								class Mother {}
								
								class Daughter extends Mother {}
								
								Daughter is a Mother 의 관계가 성립한다.
								
		has a				- 어떤 클래스 안에 다른 클래스를 멤버로 가지고 있는 상태
								
								class Mother {}
								
								class Daughter {
									Mother m = new Mother();
								}
								
								Daughter has a Mother의 관계가 성립한다.
								
================================================================================================

#상속관계에 있는 경우, 생성자의 역할
	
	하위클래스가 생성되는 순간, 상위클래스가 자동생성된다.
	즉, 상위클래스의 생성자함수가 자동호출 된다는 뜻이다.
	
	//생성되는 순간 생성자함수가 호출되므로,
	결국 하위클래스를 생성하면 상위클래스의 생성자함수도 실행된다.
	
	그러므로, 상위클래스의 생성자함수는 자동으로 호출되는 개념이다.
	자동호출되는 경우에는 무조건 기본생성자함수만 이용하게 된다.
	
	***
	참고]
		super()
			: 상위클래스의 특별한 생성자를 강제로 호출하는 기능을 가진 명령이다.
			상위클래스의 생성자함수를 가르키는 용어
			
		특징]
			1. 반드시 생성자함수 안에서만 사용가능하다.
			
			2. 반드시 첫줄, 첫문장으로만 사용가능하다.